bookstore application step by step:
___________________________________
1. creating database tables 
create table books(id int not null auto_increment,
isbn varchar(20) not null,
title varchar(50) not null,
author varchar(80) not null,
pubDate date not null, price double not null,
primary key(id) , unique key(isbn));


insert into books(isbn, title, author, pubDate, price) values('12A','c basics','raj','2011-12-22',450);

2. dao layer
____________

jdbc.driverName=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/yms21?useSSL=false
jdbc.username=root
jdbc.password=root


connection factory

public class ConnectionFactory {
	private static Connection connection = null;

	private ConnectionFactory() {
	}

	public static Connection getConnection() {
		InputStream is = ConnectionFactory.class.getClassLoader().getResourceAsStream("db.properties");
		Properties properties = new Properties();
		try {
			properties.load(is);
		} catch (IOException e) {
			e.printStackTrace();
		}

		String driver = properties.getProperty("jdbc.driverName");
		String url = properties.getProperty("jdbc.url");
		String username = properties.getProperty("jdbc.username");
		String password = properties.getProperty("jdbc.password");

		//jdbc 4.0 loading driver is optional ie if mysql connetor jar is in classpath it works
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ex) {
		}

		try {
			connection = DriverManager.getConnection(url, username, password);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}

		return connection;
	}

}

public class Book {
	private int id;
	private String isbn;
	private String title;
	private String author;
	private Date pubDate;
	private double price;
}


public interface BookDao {
	public List<Book> getAllBooks();
	public Book addBook(Book book);
	public Book delBook(int id);
	public Book updateBook(int id, double price);
	public Book getBookById(int id);
	public Book getBookByIsbn(String isbn);
}



public class BookDaoImpl implements BookDao {

	private Connection connection;

	public BookDaoImpl() {
		connection = ConnectionFactory.getConnection();
	}

	@Override
	public List<Book> getAllBooks() {
		
		if(connection==null)
			System.out.println("-------its null------------");
		
		
		List<Book> books = new ArrayList<>();
		Book tempBook;
		try {
			String all_books_query = "select * from books";
			Statement stmt = connection.createStatement();
			ResultSet rs = stmt.executeQuery(all_books_query);
			// id | isbn | title | author | pubDate | price
			while (rs.next()) {
				tempBook = new Book(rs.getInt("id"), 
						rs.getString("isbn"), 
						rs.getString("title"),
						rs.getString("author"), 
						rs.getDate("pubDate"), 
						rs.getDouble("price"));

				books.add(tempBook);
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
			throw new DataAccessException(ex.getMessage());
		}
		return books;
	}

	@Override
	public Book addBook(Book book) {
		
		try {
			String add_book_query=
			"insert into books(isbn, title, author, pubDate, price) values(?,?,?,?,?)";
			PreparedStatement pstmt=connection.prepareStatement(add_book_query, 
					Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, book.getIsbn());
			pstmt.setString(2, book.getTitle());
			pstmt.setString(3, book.getAuthor());
			pstmt.setDate(4, new Date(book.getPubDate().getTime()));
			pstmt.setDouble(5, book.getPrice());
			
			int noOfRowsEffected=pstmt.executeUpdate();
			
			if(noOfRowsEffected>0) {
				ResultSet rs=pstmt.getGeneratedKeys();
				rs.next();
				book.setId(rs.getInt(1));
			}	
		} catch (SQLException ex) {
			ex.printStackTrace();
			throw new DataAccessException(ex.getMessage());
		}
		
		return book;
	}

	@Override
	public Book delBook(int id) {
		
		Book bookToBeDeleted = getBookById(id);
		try {
			String delete_book_by_id="delete from books where id=?";
			PreparedStatement pstmt= connection.prepareStatement(delete_book_by_id);
			pstmt.setInt(1, id);
			pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bookToBeDeleted;
	}

	@Override
	public Book updateBook(int id, double price) {
		Book bookToBeUpdated = getBookById(id);// if book is not found it throws the ex: BookNotFoundEx
		
		try {
			String update_book_query=
			"update books set price=? where id=?";
			PreparedStatement pstmt=connection.prepareStatement(update_book_query);
			pstmt.setDouble(1, price);
			pstmt.setInt(2, id);
			int noOfRowsEffected=pstmt.executeUpdate();
			
		} catch (SQLException ex) {
			ex.printStackTrace();
			throw new DataAccessException(ex.getMessage());
		}
		bookToBeUpdated.setPrice(price);
		
		return bookToBeUpdated;
	}

	@Override
	public Book getBookById(int id) {
		Book book=null;
		try {
			String get_book_by_id="select * from books where id=?";
			PreparedStatement pstmt= connection.prepareStatement(get_book_by_id);
			pstmt.setInt(1, id);
			ResultSet rs=pstmt.executeQuery();
			if(rs.next()) {
				book=new Book(rs.getInt("id"), rs.getString("isbn"), rs.getString("title"),
						rs.getString("author"), rs.getDate("pubDate"), rs.getDouble("price"));
			}else {
				throw new BookNotFoundException("book with id "+ id +" is not found");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return book;
	}

	@Override
	public Book getBookByIsbn(String isbn) {
		Book book=null;
		try {
			String get_book_by_isbn="select * from books where isbn=?";
			PreparedStatement pstmt= connection.prepareStatement(get_book_by_isbn);
			pstmt.setString(1, isbn);
			
			ResultSet rs=pstmt.executeQuery();
			if(rs.next()) {
				book=new Book(rs.getInt("id"), rs.getString("isbn"), rs.getString("title"),
						rs.getString("author"), rs.getDate("pubDate"), rs.getDouble("price"));
			}else {
				throw new BookNotFoundException("book with isbn "+ isbn +" is not found");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return book;
	}

}


public class Main {
	
	public static void main(String[] args) {
		BookDao dao=new BookDaoImpl();
		List<Book> books=dao.getAllBooks();
		books.forEach(b-> System.out.println(b));
		
		//getBook by id
		//Book book=dao.getBookById(2);
		//System.out.println(book);
		
		//insert the book
//		Book book=new Book("MQ12", "spring in action", "bar", new Date(), 590);
//		Book addedBook=dao.addBook(book);
//		System.out.println(addedBook);
//		
		// update the price
		//dao.updateBook(3, 700);
		//System.out.println("------");
		
		//Book delBook=dao.delBook(3);
		//System.out.println(delBook);
		//System.out.println("--------------");
		
	}

}



public class BookNotFoundException extends RuntimeException {
	public BookNotFoundException(String message) {
		super(message);
	}
}

public class DataAccessException extends RuntimeException {
	public DataAccessException(String message) {
		super(message);
	}
}

public class UserNotFoundException extends RuntimeException{
	public UserNotFoundException(String message) {
		super(message);
		
	}
}




public class User {
	private int id;
	private String username;
	private String password;
	private String profile;
}


public interface UserDao {
	public void addUser(User user);
	public User getUser(String username, String password);
}



public class UserDaoImpl implements UserDao {

	private Connection connection;

	public UserDaoImpl() {
		connection = ConnectionFactory.getConnection();
	}

	@Override
	public void addUser(User user) {
		// id | username | password | prfile
		String add_customer = "insert into users(username,password, profile) values (?,?,?)";
		PreparedStatement pstmt;
		try {
			pstmt = connection.prepareStatement(add_customer);
			pstmt.setString(1, user.getUsername());
			pstmt.setString(2, user.getPassword());
			pstmt.setString(3, user.getProfile());

			pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			throw new DataAccessException(e.getMessage());
		}
	}

	@Override
	public User getUser(String username, String password) {
		User user = null;
		String get_user = "select * from users where username=? and password=?";
		PreparedStatement pstmt;
		try {
			pstmt = connection.prepareStatement(get_user);
			pstmt.setString(1, username);
			pstmt.setString(2, password);

			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				user = new User(rs.getInt("id"),username, password, rs.getString("profile"));
				//user = new User(username, password, rs.getString("prfile"));
			} else {
				throw new UserNotFoundException("user with username " + username + " is not found");
			}

		} catch (SQLException e) {
			e.printStackTrace();
			throw new DataAccessException(e.getMessage());
		}
		return user;

	}
}





3. service layer


4. controlller layer
_____________________


@WebServlet("/BookController.do")
public class BookController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private BookDao dao = new BookDaoImpl();

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String action = request.getParameter("action");
		if (action.equals("showallbooks")) {
			request.setAttribute("books", dao.getAllBooks());
			RequestDispatcher rd = request.getRequestDispatcher("show.jsp");
			rd.forward(request, response);
		} 
		else if (action.equals("addbook")) {
			request.getRequestDispatcher("addbook.jsp").forward(request, response);
		}else if(action.equals("delBook")) {
			int id=Integer.parseInt(request.getParameter("id").trim());
			dao.delBook(id);
			response.sendRedirect("BookController.do?action=showallbooks");
		}
		else if(action.equals("updateBook")) {
			int id=Integer.parseInt(request.getParameter("id").trim());
			Book book=dao.getBookById(id);
			request.setAttribute("book", book);
			request.getRequestDispatcher("updatebook.jsp").forward(request, response);
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		int id=Integer.parseInt(request.getParameter("id").trim());
		System.out.println("----------------------");
		System.out.println(id);
		System.out.println("----------------------");
		
		String isbn = request.getParameter("isbn");
		String title = request.getParameter("title");
		String author = request.getParameter("author");

		String pubDateString = request.getParameter("pubDate");

		String priceStr = request.getParameter("price");
		
		SimpleDateFormat formate = new SimpleDateFormat("dd/MM/yyyy");

		Date pubDate = null;
		try {
			pubDate = formate.parse(pubDateString);
		} catch (ParseException e) {
			e.printStackTrace();
		}

		Double price=Double.parseDouble(priceStr);
		
		Book book=new Book(isbn, title, author, pubDate, price);
		
		//if id=0 : it is a new book
		//if id!=0 then this book is for updation
		
		if(id==0) {
		dao.addBook(book);
		}else {
			dao.updateBook(id, price);
		}
		
		response.sendRedirect("BookController.do?action=showallbooks");
		
	}

}






@WebServlet("/LoginController")
public class LoginController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private UserDao userDao = new UserDaoImpl();

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String username = request.getParameter("username");
		String password = request.getParameter("password");
		try {
			User user = userDao.getUser(username, password);
			HttpSession httpSession = request.getSession();
			httpSession.setAttribute("user", user);
			response.sendRedirect("BookController.do?action=showallbooks");
			
		} catch (UserNotFoundException ex) {
			response.sendRedirect("login.jsp?message=login failed");
		}

	}

}




@WebServlet("/LogoutController")
public class LogoutController extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
	
		HttpSession httpSession=request.getSession(false);
		if(httpSession!=null) {
			httpSession.invalidate();
		}
		 
		response.sendRedirect("login.jsp?message=logout successfully!");
	
	}
}




@WebServlet("/UserMgtController.do")
public class UserMgtController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private UserDao userDao=new UserDaoImpl();
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		request.getRequestDispatcher("adduser.jsp").forward(request, response);

	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String username = request.getParameter("username");
		String password = request.getParameter("password");
		String profile=request.getParameter("profile");
		User user=new User(username, password, profile);
		userDao.addUser(user);
		response.sendRedirect("BookController.do?action=showallbooks");
	}
	

}



filters
________
@WebFilter("*.do")
public class ClearCacheFilter implements Filter {
	public void init(FilterConfig fConfig) throws ServletException {
		// TODO Auto-generated method stub
	}

	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		HttpServletResponse httpResponse = (HttpServletResponse) response;
		httpResponse.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		httpResponse.addHeader("Cache-Control", "post-check=0, pre-check=0");
		httpResponse.setHeader("Pragma", "no-cache");
		httpResponse.setDateHeader("Expires", 0);
		chain.doFilter(request, response);
	}

	public void destroy() {

	}

}




@WebFilter("*.do")
public class SecFilter implements Filter {

	public void init(FilterConfig fConfig) throws ServletException {

	}

	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest req=(HttpServletRequest) request;
		HttpServletResponse res=(HttpServletResponse) response;
		boolean isValid=false;
		
		HttpSession httpSession=req.getSession(false);//looking for pre existing session
		
		if(httpSession!=null) {
			User user=(User) httpSession.getAttribute("user");
			if(user!=null) {
				isValid=true;
			}
		}
		if(isValid) {
			chain.doFilter(request, response);
		}else {
			res.sendRedirect("login.jsp?message=login please");
		}
	}

	public void destroy() {
		
	}

}



JSP:
_________
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>HCL bookstore application</title>
</head>
<style>
table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
</style>


<body>
welcome ${user.username }! <br>
<br>
<a href="LogoutController">logout</a>

<br>
<table>
	<thead>
		<tr>
			<th>id</th>
			<th>isbn</th>
			<th>title</th>
			<th>author</th>
			<th>pub date</th>
			<th>price</th>
			<c:if test="${user.profile=='admin' ||user.profile=='mgr' }">
			<th>update</th>
			</c:if>
			<c:if test="${user.profile=='admin'}">
			<th>delete</th>
			</c:if>
		</tr>
	</thead>
	<tbody>
		<c:forEach items="${books}" var="book">
			<tr>
				<td>${book.id}</td>
				<td>${book.isbn}</td>
				<td>${book.title}</td>
				<td>${book.author}</td>
				<td><fmt:formatDate  pattern="dd/MM/yyyy" value="${book.pubDate}"/></td>
				<td>${book.price}</td>
				
				<c:if test="${user.profile=='admin' ||user.profile=='mgr' }">
					<td><a href="BookController.do?action=updateBook&id=<c:out value="${book.id}"/>">update</a></td>
				</c:if>
				<c:if test="${user.profile=='admin'}">
					<td><a href="BookController.do?action=delBook&id=<c:out value="${book.id}"/>">delete</a></td>
				</c:if>
				
			</tr>
		</c:forEach>
	</tbody>
</table>
<c:if test="${user.profile=='admin' ||user.profile=='mgr'  }">
	<a href="BookController.do?action=addbook">add new book</a>
</c:if>
<br>
<c:if test="${user.profile=='admin'}">
	<a href="UserMgtController.do">register new user</a>
</c:if>
</body>
</html>



addbook
__________
<form action="BookController.do" method="post">
	<input type="hidden" name="id"  value="0"/>
	<table>
		<tr>
			<td>isbn</td>
			<td><input type="text" name="isbn" id="isbnId"/></td>
		</tr>
		<tr>
			<td>Title</td>
			<td><input type="text" name="title" id="titleId"/></td>
		</tr>
		<tr>
			<td>Author</td>
			<td><input type="text" name="author" id="authorId"/></td>
		</tr>
		<tr>
			<td>pub date</td>
			<td><input type="text" name="pubDate" id="pubDateId"/></td>
		</tr>
		<tr>
			<td>price</td>
			<td><input type="text" name="price" id="priceId"/></td>
		</tr>
		<tr>
			
			<td> <input type="submit"/> </td>
		</tr>
	</table>
</form>



updated books
______________
<form action="BookController.do" method="post">
	<input type="hidden" name="id"  value="${book.id}"/>
	<table>
		<tr>
			<td>isbn</td>
			<td><input type="text" name="isbn"  value="${book.isbn}" id="isbnId" readonly/></td>
		</tr>
		<tr>
			<td>Title</td>
			<td><input type="text" name="title"  value="${book.title}" id="titleId" readonly/></td>
		</tr>
		<tr>
			<td>Author</td>
			<td><input type="text" name="author"  value="${book.author}"  id="authorId" readonly/></td>
		</tr>
		<tr>
			<td>pub date</td>
			<td><input type="text" name="pubDate"  value="<fmt:formatDate  pattern="dd/MM/yyyy" value="${book.pubDate}"/>"  id="pubDateId" readonly/></td>
		</tr>
		<tr>
			<td>price</td>
			<td><input type="text" name="price"  value="${book.price}"  id="priceId"/></td>
		</tr>
		<tr>
			
			<td> <input type="submit"/> </td>
		</tr>
	</table>
</form>



login
________
${param.message }<br>

<form action="LoginController" method="post">
<table>
		<tr>
			<td>username</td>
			<td><input type="text" name="username" id="unId"/></td>
		</tr>
		<tr>
			<td>password</td>
			<td><input type="password" name="password" id="pwId"/></td>
		</tr>
		<tr>
			
			<td><input type="submit"/></td>
		</tr>
</table>

</form>



adduser.jsp
__________-
<form action="UserMgtController.do" method="post">
	<table>
		<tr>
			<td>username</td>
			<td><input type="text" name="username" id="unId"/></td>
		</tr>
		<tr>
			<td>password</td>
			<td><input type="text" name="password" id="pwId"/></td>
		</tr>
		<tr>
			<td>profile</td>
			<td>
			<select name="profile" size="1"> 
				<option value="mgr">mgr</option> 
				<option value="emp">emp</option> 
			</select>
		</td>
		</tr>
		
		<tr>
			<td> <input type="submit"/> </td>
		</tr>
	</table>
</form>

